# Generated by Django 5.2.1 on 2025-06-02 13:28

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import users.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('username', models.CharField(error_messages={'unique': 'Пользователь с таким никнеймом уже существует.'}, max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator(message='Никнейм содержит недопустимые символы')], verbose_name='Никнейм')),
                ('email', models.EmailField(error_messages={'unique': 'Такой адрес электронной почты уже используется'}, max_length=254, unique=True, validators=[django.core.validators.EmailValidator(message='Введите корректный email')], verbose_name='Электронная почта')),
                ('first_name', models.CharField(max_length=150, validators=[users.validators.CustomNameValidator()], verbose_name='Имя пользователя')),
                ('last_name', models.CharField(max_length=150, validators=[users.validators.CustomNameValidator()], verbose_name='Фамилия пользователя')),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('role', models.CharField(choices=[('user', 'user'), ('moderator', 'moderator'), ('admin', 'admin')], default='user', max_length=16, verbose_name='Роль пользователя')),
                ('avatar', models.ImageField(blank=True, default='users/avatars/default_avatar.jpg', null=True, upload_to='users/avatars/', verbose_name='Аватар пользователя')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='Дата регистрации')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'ordering': ('username',),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
